#pragma once
/////////////////////////////////////////////////////////////////////////////
// HEADERS
/////////////////////////////////////////////////////////////////////////////
#include "LocationContext.h"
#include "Episodes.h"
#include "Player.h"
#include "Arum_City.h"
#include "Settings_Handle.h"
#include <map>
#include "C_TEXTS.h"
#include <memory>
#include "Enums.h"
#include "NPC.h"
#include <string>
#include <iostream>


class Game
{
private:
	/////////////////////////////////////////////////////////////////////////////
	//
	// Default constructor and others writed in private because Singleton
	//
	/////////////////////////////////////////////////////////////////////////////
	Game();
	Game(const Game&) = delete;
	Game& operator=(const Game&) = delete;
	~Game();

	/////////////////////////////////////////////////////////////////////////////
	///
	/// EpisodesMachine function object to handle with episodes
	///
	/////////////////////////////////////////////////////////////////////////////
	EpisodesMachine episodes_machine;

	/////////////////////////////////////////////////////////////////////////////
	///
	/// LocationContext class object to handle with locations
	///
	/////////////////////////////////////////////////////////////////////////////
	LocationContext Location;

	/////////////////////////////////////////////////////////////////////////////
	///
	/// Player class object to control main character
	///
	/////////////////////////////////////////////////////////////////////////////
	Player player;

	/////////////////////////////////////////////////////////////////////////////
	///
	/// Episodes enum object to handle with names of episodes
	///
	/////////////////////////////////////////////////////////////////////////////
	Episodes episod;

	/////////////////////////////////////////////////////////////////////////////
	///
	/// PlayerStates enum object to handle with names of player states
	///
	/////////////////////////////////////////////////////////////////////////////
	PlayerStates state;

	/////////////////////////////////////////////////////////////////////////////
	///
	/// NPC class object to handle with npcs
	///
	/////////////////////////////////////////////////////////////////////////////
	NPC npc;

	/////////////////////////////////////////////////////////////////////////////
	///
	/// Unique pointer to C_TEXTS class object to load texts from file
	/// and handle with it
	///
	/////////////////////////////////////////////////////////////////////////////
	std::unique_ptr < C_TEXTS > TEXTS_object;

	/////////////////////////////////////////////////////////////////////////////
	///
	/// Boolean variable with information about status of game
	/// If true - Your playing go on
	/// else - You lost the game 
	///
	/////////////////////////////////////////////////////////////////////////////
	bool gameOver;

	/////////////////////////////////////////////////////////////////////////////
	///
	/// Static variable with adress of Game class instance ( Singleton )
	///
	/////////////////////////////////////////////////////////////////////////////
	static Game* instance;

	/////////////////////////////////////////////////////////////////////////////
	///
	/// Map with string first type and int second type of variables
	/// Stores settings loaded from file "SettingsFile"
	///
	/////////////////////////////////////////////////////////////////////////////
	std::map< std::string, int> SettingsMap;

public:


	/////////////////////////////////////////////////////////////////////////////
	///
	/// Function which returns static reference to instance of Game class
	///
	/////////////////////////////////////////////////////////////////////////////
	static Game& getInstance();

	/////////////////////////////////////////////////////////////////////////////
	///
	/// Function which returns int Location name to operate with enum	
	/// To change : returning enum
	///
	/////////////////////////////////////////////////////////////////////////////
	int getLocationName();

	/////////////////////////////////////////////////////////////////////////////
	///
	/// Function which returns reference to Player class object
	///
	/////////////////////////////////////////////////////////////////////////////
	Player & getPlayer();


	/////////////////////////////////////////////////////////////////////////////
	///
	/// Void function which write information about location where the player is
	/// on console
	///
	/////////////////////////////////////////////////////////////////////////////
	void locationInfo();

	/////////////////////////////////////////////////////////////////////////////
	///
	/// Void function which change location
	///
	/////////////////////////////////////////////////////////////////////////////
	void changeLocation();

	/////////////////////////////////////////////////////////////////////////////
	///
	/// Void function which update settings of game by loading from file
	/// and text language
	///
	/////////////////////////////////////////////////////////////////////////////
	void UpdateSettings();

	/////////////////////////////////////////////////////////////////////////////
	///
	/// Void function which set gameOver boolean as true
	///
	/////////////////////////////////////////////////////////////////////////////
	void setGameOver();

	/////////////////////////////////////////////////////////////////////////////
	///
	/// Boolean function which returns 
	/// status of gameOver boolean variable
	///
	/////////////////////////////////////////////////////////////////////////////
	bool getGameOver();

	/////////////////////////////////////////////////////////////////////////////
	///
	/// Void function which set episod in EpisodesMachine 
	/// object by Episodes enum
	///
	/////////////////////////////////////////////////////////////////////////////
	void setEpisod(Episodes episod);

	/////////////////////////////////////////////////////////////////////////////
	///
	/// Void function which set state in PlayerStates 
	/// object of enum by PlayerStates enum
	///
	/////////////////////////////////////////////////////////////////////////////
	void setPlayerState(PlayerStates state);

	/////////////////////////////////////////////////////////////////////////////
	///
	/// Boolean function which updates status of this game engine
	/// Returns true if game is go on
	/// Returns false if not
	///
	/////////////////////////////////////////////////////////////////////////////
	bool Update();
};


